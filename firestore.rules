
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read any profile, but only write to their own.
    // Allow list for username/email checks during signup.
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Offers can be read by anyone, but only written by admins.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Requirements can be read by anyone, but only written by admins.
    match /requirements/{reqId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }

    // Flagged content is only accessible by admins.
    match /flagged_content/{contentId} {
        allow read, write: if isAdmin();
    }
    
    // Chat documents and their message subcollections
    match /chats/{roomId} {
      // Public state chats: any authenticated user can read/write.
      // We check if roomId is not a UID-based personal chat room.
      function isPublicChat() {
        return !exists(/databases/$(database)/documents/users/$(roomId.split('_')[0]));
      }

      // Personal chats: only the two users in the chat can access.
      function isPersonalChatParticipant() {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
      }
      
      // Allow read/write on the chat document itself (for timestamps) and its messages
      allow read, write: if request.auth != null && (isPublicChat() || isPersonalChatParticipant());
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && (isPublicChat() || isPersonalChatParticipant());
      }
    }
    
    // This rule is specifically for the collectionGroup query on the admin page.
    // It allows an admin to query across all 'messages' subcollections.
    match /{path=**}/messages/{messageId} {
      allow read: if isAdmin();
    }
  }
}
