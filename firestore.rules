
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);

      // User's own list of personal chats
      match /personalChats/{otherUserId} {
        allow write: if isOwner(userId);
      }
    }

    // Public state-based chats
    match /chats/{stateId} {
      allow read, write: if request.auth != null;

      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.user.id == request.auth.uid;
        allow update: if request.auth != null && resource.data.user.id == request.auth.uid;
        allow delete: never; // Use soft deletes through update
      }
    }

    // Personal one-on-one chats (NOTE: No membership check, any user can access)
    match /personalChats/{roomId} {
      allow read, write: if request.auth != null;

      match /messages/{messageId} {
        allow read, create: if request.auth != null;
        // Only allow a user to edit/delete their own messages
        allow update: if request.auth != null && resource.data.user.id == request.auth.uid;
        allow delete: never;
      }
    }

    // Requirements
    match /requirements/{reqId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.user.id == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    // Offers
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
