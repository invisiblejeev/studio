
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin status
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Users can read any profile (for chat display), but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Admins collection is read-only for clients.
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if false; // Only backend can write to this
    }

    // Chat rooms and messages
    match /chats/{roomId} {
      function isPublicChat() {
        return !roomId.matches('.*_.*'); // Public rooms don't have '_'
      }

      function isPrivateChatParticipant() {
        return roomId.matches('.*_.*') && (request.auth.uid in roomId.split('_'));
      }
      
      allow read, create, update: if request.auth != null && (isPublicChat() || isPrivateChatParticipant());

      match /messages/{messageId} {
        allow read, create: if request.auth != null && (isPublicChat() || isPrivateChatParticipant());
        
        // Allow user to update their own message (for soft-delete)
        allow update: if request.auth != null && request.resource.data.user.id == request.auth.uid;
        allow delete: if false; // Disallow hard deletes
      }
    }

    // Requirements can be created by any user.
    // They can be updated/deleted by the author or an admin.
    match /requirements/{requirementId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.user.id == request.auth.uid || isAdmin());
    }

    // Offers can only be written by admins. Any user can read them.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && isAdmin();
    }
  }
}
