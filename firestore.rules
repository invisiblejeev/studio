
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Users collection
    match /users/{userId} {
      // Any signed-in user can read any user's profile (needed for chat, etc.)
      allow read: if isSignedIn();
      // Only the user themselves can create or update their own profile
      allow create, update: if isUser(userId);
       // A user can delete their own profile document
      allow delete: if isUser(userId);
    }

    // Chats collection (contains all state and personal chats)
    match /chats/{roomId} {
        // Read: Any signed-in user can read state chats. Personal chats are restricted.
        allow read: if isSignedIn();

        // Write: Any signed-in user can create a message. Update is restricted.
        allow write: if isSignedIn();
        
        // Messages subcollection
        match /messages/{messageId} {
            // Read: Any signed-in user can read state chats. Personal chats are restricted.
            allow read: if isSignedIn();
            // Write: Any signed-in user can create a message.
            allow write: if isSignedIn();
        }
    }
    
    // Personal chat references within a user's document
    match /users/{userId}/personalChats/{otherUserId} {
        // Only the user can read/write their own list of personal chats
        allow read, write: if isUser(userId);
    }

    // Offers collection
    match /offers/{offerId} {
        // Anyone can read offers
        allow read: if true;
        // Only signed-in users can write (admins handled by app logic)
        allow write: if isSignedIn();
    }
    
    // Flagged content collection (for admin review)
    match /flagged_content/{contentId} {
        // Only signed-in users (admins, via app logic) can create flagged content
        allow create: if isSignedIn();
        // No one can read/update/delete directly - must be done with admin credentials
        allow read, update, delete: if false;
    }

    // Inappropriate logs collection
    match /inappropriate_logs/{logId} {
      // The backend service can write to this, so we need to allow signed-in users to create.
      allow create: if isSignedIn();
       // No one can read/update/delete directly
      allow read, update, delete: if false;
    }
  }
}
