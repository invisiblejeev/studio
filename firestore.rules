
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow any authenticated user to read any user's profile.
      // This is needed for chat member lists, profile popups, etc.
      allow read: if request.auth != null;

      // Allow a user to create, update, or delete their own document.
      allow write: if request.auth.uid == userId;
    }

    // Rules for chat rooms
    match /chats/{roomId}/{documents=**} {
        // For public state chats (roomId does not contain '_')
        function isPublicChat() {
            return !roomId.matches('.*_.*');
        }

        // For private chats (roomId is formatted as 'uid1_uid2')
        function isPrivateChatParticipant() {
            let uids = roomId.split('_');
            return request.auth.uid == uids[0] || request.auth.uid == uids[1];
        }

        // Admin access check
        function isAdmin() {
            return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        // Grant access based on chat type or admin role
        allow read, write: if (isPublicChat() && request.auth != null) || 
                              (isPrivateChatParticipant()) ||
                              (isAdmin());
    }

    // Rules for the 'requirements' collection
    match /requirements/{requirementId} {
      // Allow any authenticated user to read requirements.
      allow read: if request.auth != null;
      
      // Only allow admins to write (create, update, delete) requirements.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
       // Allow any authenticated user to read offers.
      allow read: if request.auth != null;

      // Only allow admins to write (create, update, delete) offers.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
