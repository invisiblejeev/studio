
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // This rule governs the collectionGroup query used on the Admin dashboard to find spam.
    // It allows a read *only if* the user is authenticated AND their profile has isAdmin: true.
    match /{path=**}/messages/{messageId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any profile. Needed for member counts, profile dialogs, etc.
      allow read: if request.auth != null;
      // Only the user themselves can write to their own profile.
      allow write: if request.auth.uid == userId;
    }

    // Rules for individual chat rooms
    match /chats/{roomId} {
        // Any authenticated user can read the chat document itself (which contains metadata).
        allow read: if request.auth != null;
        
        // A user can write a message if they are authenticated. The client logic ensures they only
        // write to rooms they have access to.
        allow write: if request.auth != null;
    }

    // Rules for the 'requirements' collection
    match /requirements/{requirementId} {
      // Any authenticated user can read the requirements list.
      allow read: if request.auth != null;

      // IMPORTANT: Clients cannot create requirements. This is done by the backend AI trigger.
      allow create: if false;

      // Only admins can update or delete requirements.
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Rules for the 'offers' collection
    match /offers/{offerId} {
        // Any authenticated user can read offers.
        allow read: if request.auth != null;
        
        // Only admins can create, update, or delete offers.
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
