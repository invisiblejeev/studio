rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Checks if the requesting user is a member of a specific chat room.
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }
    
    function isPublicChat(roomId) {
      return get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // A user can read/write their own personal chat list.
      match /personalChats/{chatId} {
        allow read, write: if isUser(userId);
      }
    }
    
    match /chats/{roomId} {
      // Allow read if it's a public chat or if the user is a member of the private chat.
      allow read: if isPublicChat(roomId) || isChatMember(roomId);
      
      // Allow any authenticated user to create a chat document.
      // This is needed for both public and private chat initiation.
      allow create: if isAuthenticated();
      
      // Allow updates for last message tracking if the user is a member.
      allow update: if isChatMember(roomId);
      
      match /messages/{messageId} {
        // Allow read if the user can read the parent chat room.
        allow read: if isPublicChat(roomId) || isChatMember(roomId);
        
        // Allow create if user is authenticated and a member of the chat.
        allow create: if isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        
        // Allow update (for edits/deletes) if user is the author of the message.
        allow update: if isAuthenticated() && resource.data.user.id == request.auth.uid;
        
        // Deny client-side deletes.
        allow delete: if false;
      }
    }

    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Allow author or admin to update/delete.
      allow update, delete: if (resource.data.user.id == request.auth.uid || isAdmin());
    }

    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
