
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a personal chat
    function isChatMember(roomId) {
      return get(/databases/$(database)/documents/personalChats/$(roomId)).data.members.hasAny([request.auth.uid]);
    }

    // Users can only read their own profile, and can only write to their own profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Public state-based chats
    match /chats/{stateId} {
      // Any authenticated user can read or create a public chat room document.
      allow read, create: if request.auth != null;

      // Only authenticated users can update the last message details.
      allow update: if request.auth != null;

      match /messages/{messageId} {
        // Any authenticated user can read messages in a public chat.
        allow read: if request.auth != null;
        
        // Users can only create messages if they are the sender.
        allow create: if request.auth.uid == request.resource.data.user.id;
        
        // Users can only update/delete their own messages.
        allow update, delete: if request.auth.uid == resource.data.user.id;
      }
    }
    
    // Personal one-on-one chats
    match /personalChats/{roomId} {
        // Allow read/update only if the user is a member of the chat.
        allow read, update: if isChatMember(roomId);
        
        // Allow create if the requesting user is in the members list of the new document.
        allow create: if request.auth.uid in request.resource.data.members;

        match /messages/{messageId} {
            // Allow read/write to messages subcollection only if user is a member of the chat room.
            allow read, write: if isChatMember(roomId);
        }
    }

    // Requirements can be read by anyone, but only created/updated/deleted by their authors or an admin.
    match /requirements/{requirementId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.user.id || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers can be read by anyone, but only written by admins.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Deny all other writes by default
    match /{document=**} {
      allow write: if false;
    }
  }
}
