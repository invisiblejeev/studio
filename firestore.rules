
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/personalChats/$(roomId)).data.members;
    }

    // USERS
    // Users can be queried by anyone authenticated (for username/email check).
    // A user can be created by anyone.
    // A user can only read, update, or delete their own profile.
    match /users/{userId} {
      allow get, list: if isAuth();
      allow create: if isAuth();
      allow update, delete: if isOwner(userId);

      // User's personal chat metadata
      match /personalChats/{otherUserId} {
        allow read, update: if isOwner(userId);
        // Creation is handled by the getPersonalChatRoomId function logic
        allow create: if isOwner(userId);
      }
    }

    // CHATS (Public)
    // Any authenticated user can read or write to any public chat room.
    match /chats/{stateId} {
      allow read, write: if isAuth();
      
      // Messages within a public chat
      match /messages/{messageId} {
         allow read: if isAuth();
         allow create: if isAuth() && request.resource.data.user.id == request.auth.uid;
         allow update: if isAuth() && isOwner(resource.data.user.id); // Allow editing/deleting own messages
      }
    }

    // PERSONAL CHATS
    // A user can only access a personal chat room if they are a member.
    match /personalChats/{roomId} {
      allow get: if isAuth() && isChatMember(roomId);
      // Creation is handled by getPersonalChatRoomId
      allow create: if isAuth(); 
      allow update: if isAuth() && isChatMember(roomId); // For updating last message, etc.
      
      // Messages within a personal chat
      match /messages/{messageId} {
        allow read: if isAuth() && isChatMember(roomId);
        allow create: if isAuth() && isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        allow update: if isAuth() && isOwner(resource.data.user.id); // Allow editing/deleting own messages
      }
    }

    // REQUIREMENTS
    // Any authenticated user can read requirements.
    // Users can create requirements.
    // Users can only update/delete their own requirements, unless they are an admin.
    match /requirements/{reqId} {
      allow read, create: if isAuth();
      allow update, delete: if isAuth() && (isOwner(resource.data.user.id) || isAdmin());
    }

    // OFFERS
    // Any authenticated user can read offers.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if isAuth();
      allow write: if isAuth() && isAdmin();
    }
  }
}
