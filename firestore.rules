rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // Check the 'isAdmin' field on the user's own profile document
      return isUser(request.auth.uid) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if the user is a member of a private chat
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
      
      // Users can only access their own personalChats subcollection
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }

    // Chat rooms can be read if they are public or if the user is a member.
    // Writes are more restricted.
    match /chats/{roomId} {
      allow read: if isAuthenticated() && (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId));
      
      // Allow creation of a chat room if the user is authenticated and is one of the members.
      allow create: if isAuthenticated() && isChatMember(roomId);
      
      // Allow updates (like last message) only by members of the chat.
      allow update: if isAuthenticated() && isChatMember(roomId);
      
      // Message subcollection rules
      match /messages/{messageId} {
        // Read is allowed if the user can read the parent chat room.
        allow read: if isAuthenticated() && (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId));
        
        // Allow users to create messages in chats they are a member of.
        // Also check that the message being created belongs to the user sending it.
        allow create: if isAuthenticated() && isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        
        // Allow users to update (edit/delete) only their own messages.
        allow update: if isAuthenticated() && isChatMember(roomId) && get(/databases/$(database)/documents/chats/$(roomId)/messages/$(messageId)).data.user.id == request.auth.uid;
        
        // Do not allow direct deletion of messages from the client.
        allow delete: if false;
      }
    }

    // Requirements can be read by any authenticated user.
    // Create, update, delete only by the author or an admin.
    match /requirements/{requirementId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (resource.data.user.id == request.auth.uid || isAdmin());
    }

    // Offers can be read by any authenticated user.
    // Write operations are restricted to admins only.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }
  }
}
