
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/personalChats/$(roomId)).data.users;
    }
    
    function isMessageOwner(messageId, roomId) {
      return get(/databases/$(database)/documents/personalChats/$(roomId)/messages/$(messageId)).data.user.id == request.auth.uid;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isUser(userId);
      
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }

    match /chats/{stateId} {
      // Public, state-based chats
      allow read, write: if request.auth != null;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.user.id;
      }
    }
    
    match /personalChats/{roomId} {
        // Private one-on-one chats
        allow read, update: if isChatMember(roomId);
        allow create: if request.auth.uid in request.resource.data.users;

        match /messages/{messageId} {
            allow read, create: if isChatMember(roomId);
            allow update, delete: if isMessageOwner(messageId, roomId);
        }
    }

    match /requirements/{requirementId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.user.id == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
