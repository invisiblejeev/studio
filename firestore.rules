
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isChatMember(roomId) {
      let chatData = get(/databases/$(database)/documents/chats/$(roomId)).data;
      return request.auth.uid in chatData.users;
    }
    
    // USERS collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // Allow users to create personal chat records for other users, but only if they are one of the participants.
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
        allow create: if isAuthenticated() && (isUser(userId) || isUser(otherUserId));
      }
    }
    
    // CHATS collection
    match /chats/{roomId} {
      // A user can read a chat document if it's a public chat, or if they are a member of the private chat.
      allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);
      // Anyone authenticated can create a chat room. The `getPersonalChatRoomId` function ensures private rooms are secure.
      allow create: if isAuthenticated();
      // Allow a chat member to update the last message details.
      allow update: if isChatMember(roomId);
      
      // MESSAGES subcollection
      match /messages/{messageId} {
        // A user can read messages if they have access to the parent chat room.
        allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);
        // A user can create a message if they are a member and the author of the message.
        allow create: if isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        // A user can update (edit/delete) a message only if they are the original author.
        allow update: if resource.data.user.id == request.auth.uid;
        // Direct deletes are not allowed to prevent accidental data loss.
        allow delete: if false;
      }
    }

    // REQUIREMENTS collection
    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isUser(resource.data.user.id) || isAdmin();
    }

    // OFFERS collection
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      // Only admins can create, update, or delete offers.
      allow write: if isAdmin();
    }
  }
}
