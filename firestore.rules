rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }

    function isPublicChat(roomId) {
      return get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false;
    }
    
    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // A user can only access their own personalChats subcollection
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }
    
    match /chats/{roomId} {
      allow read: if isPublicChat(roomId) || isChatMember(roomId);
      allow create: if isAuthenticated();
      // Allow updates to lastMessage fields if user is a member or it's a public chat.
      // This is crucial for sending messages.
      allow update: if isPublicChat(roomId) || isChatMember(roomId);
      
      match /messages/{messageId} {
        allow read: if isPublicChat(roomId) || isChatMember(roomId);
        // User must be the author of the message to create it.
        allow create: if isAuthenticated() && request.resource.data.user.id == request.auth.uid;
        // User must be the author to update (edit/soft-delete) their message.
        allow update: if isAuthenticated() && resource.data.user.id == request.auth.uid;
        // Do not allow direct client-side deletes.
        allow delete: if false;
      }
    }

    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // User must be the author or an admin to update/delete.
      allow update, delete: if isAuthenticated() && (resource.data.user.id == request.auth.uid || isAdmin());
    }

    match /offers/{offerId} {
      allow read: if isAuthenticated();
      // Only admins can write to offers.
      allow write: if isAdmin();
    }
  }
}
