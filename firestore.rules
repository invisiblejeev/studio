rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can only read their own profile and update it.
    // They can create their own profile.
    // Any authenticated user can read public user data from other profiles.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // A user can create a personal chat reference in another user's subcollection
      // only if they are one of the participants.
      match /personalChats/{otherUserId} {
        allow write: if isAuthenticated() && (isOwner(userId) || isOwner(otherUserId));
      }
    }
    
    // Any authenticated user can read flagged content, as it's for AI training purposes.
    match /flagged_content/{docId} {
        allow read, write: if isAuthenticated();
    }

    // Public offers can be read by anyone authenticated.
    // Write access is restricted. (Assuming only admins can write)
    match /offers/{offerId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /chats/{chatId} {
      // Allow a user to update the `lastMessageTimestamp` if they are part of the chat
      // or if it's a public state chat room.
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.users || !chatId.matches('.*_.*'));
      
      // Allow user to read chat document if they are a participant.
      allow get: if isAuthenticated() && (request.auth.uid in resource.data.users);
      
      // Allow authenticated user to list their own chats
      allow list: if isAuthenticated() && request.auth.uid in query.filters.users;
      
      match /messages/{messageId} {
        // Any authenticated user can read messages in a public state chat.
        // For private chats, only participants can read.
        allow read: if isAuthenticated() && (chatId.matches('.*_.*') == false || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);

        // Any authenticated user can write to a public state chat.
        // For private chats, only participants can write.
        allow create: if isAuthenticated() && (chatId.matches('.*_.*') == false || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
        
        // Only an admin can delete or update messages (for moderation)
        allow update, delete: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
    }
  }
}
