rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Users can only read their own personal chat list.
      // Writes are denied from the client, they are handled by backend triggers.
      match /personalChats/{otherUserId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId; // Allow sender to update their own last message
      }
    }

    // Chat rooms
    match /chats/{roomId} {
      // Allow read/write access to the chat document itself
      allow read, write: if request.auth != null;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow reads if it's a public chat (room ID doesn't contain '_')
        // or if the user is part of the private chat.
        allow read: if request.auth != null && (
          !exists(/databases/$(database)/documents/chats/$(roomId)) || // Allow if chat doc doesn't exist yet
          !get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal ||
          request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users
        );

        // Allow creating messages if authenticated.
        // Allow updating (for soft delete) only if the user is the author of the message.
        allow create: if request.auth.uid == request.resource.data.user.id;
        allow update: if request.auth.uid == resource.data.user.id;
        allow delete: if request.auth.uid == resource.data.user.id; // For full deletion if needed
      }
    }

    // Requirements are created by the backend trigger, not the client.
    // Admins can edit or delete them.
    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create: if false; // Deny client-side creation
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers can be read by any authenticated user.
    // Only admins can create, update, or delete them.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Flagged content is admin-only
    match /flagged_content/{flagId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
