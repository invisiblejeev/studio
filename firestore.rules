
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      // For this app, we assume a user document has an 'isAdmin' boolean field.
      // This requires a read to the user's own profile.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if the user is the owner of a resource
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // Users can read anyone's profile (for avatars, usernames etc.),
    // but can only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);

      // Users can only access their own personal chat list.
      match /personalChats/{otherUserId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Rules for chat rooms
    match /chats/{roomId} {
      // Chat documents can be read if it's a public chat (no '_') or if the user is a participant.
      allow read: if isAuthenticated() && (
                    !roomId.matches('.*_.*') || 
                    roomId.matches('.*' + request.auth.uid + '.*')
                  );
                  
      // Any authenticated user can create a chat room or update its metadata (like last message).
      allow create, update: if isAuthenticated();

      // Rules for messages within a chat room
      match /messages/{messageId} {
        // Messages can be read under the same conditions as the parent chat room.
        allow read: if isAuthenticated() && (
                      !roomId.matches('.*_.*') || 
                      roomId.matches('.*' + request.auth.uid + '.*')
                    );
                    
        // Users can only create messages as themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.user.id);
        
        // Users can only update (soft delete) their own messages.
        allow update: if isAuthenticated() && isOwner(resource.data.user.id);
        
        // Hard deletes are disallowed.
        allow delete: if false;
      }
    }

    // Anyone authenticated can read requirements.
    // Users can create requirements.
    // Only the author or an admin can update/delete.
    match /requirements/{requirementId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.user.id);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.user.id) || isAdmin());
    }

    // Anyone authenticated can read offers.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }
  }
}
