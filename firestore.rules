rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for user profiles
    match /users/{userId} {
      // Any authenticated user can read public profile info.
      allow read: if isAuthenticated();
      // Only the user themselves or an admin can update or delete their profile.
      allow write: if isAuthenticated() && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    match /users/{userId}/personalChats/{otherUserId} {
        // A user can read and write to their own list of personal chats.
        // This is also used for creating new chat entries.
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for chat rooms (both state-based and personal)
    match /chats/{roomId}/{document=**} {
        // A user can read messages if they are part of the chat room's user list.
        // A user can write messages if they are part of the chat room's user list.
        // This covers reading/listing messages and sending new ones.
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }

    // Rules for offers
    match /offers/{offerId} {
      // Anyone can read offers.
      allow read: if true;
      // Only admins can create, update, or delete offers.
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for flagged content (for AI training)
    match /flagged_content/{contentId} {
        // Only admins can write to the flagged content list.
        allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        // Nobody should read this directly, it is used by backend AI flows.
        allow read: if false;
    }
    
     // Rules for inappropriate content logs
    match /inappropriate_logs/{logId} {
        // The backend service can write to this log, but users cannot read or write.
        allow read, write: if false;
    }
  }
}
