
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the document
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // Rules for the 'personalChats' subcollection within a user's document
      // This stores the list of chats for a user, not the messages themselves.
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }

    // Rules for the 'chats' collection (Public, State-level chats)
    match /chats/{stateId} {
      // Any authenticated user can read or create a public chat room document.
      // Updates are allowed for functionality like updating last message details.
      allow read, write: if isAuthenticated();

      // Rules for messages within a public chat room
      match /messages/{messageId} {
        // Any authenticated user can read or write messages in a public chat.
        allow read, write: if isAuthenticated();
      }
    }
    
    // Rules for the 'personalChats' collection (Private 1-on-1 chats)
    match /personalChats/{roomId} {
      // Allow access only if the requesting user's ID is in the 'users' array of the chat room document.
      allow get, update, delete: if isAuthenticated() && request.auth.uid in resource.data.users;
      // Allow creation if the user is one of the two participants in the new chat.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.users;

      // Rules for messages within a personal chat room
      match /messages/{messageId} {
        // Allow read/write of messages only if the user has access to the parent chat room.
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/personalChats/$(roomId)).data.users;
      }
    }

    // Rules for the 'requirements' collection
    match /requirements/{reqId} {
      allow read, create: if isAuthenticated();
      // Allow update/delete only if the user is the author or an admin.
      allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.user.id || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Rules for the 'offers' collection
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      // Only admins can create, update, or delete offers.
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
