rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isChatMember(roomId) {
      let chat = get(/databases/$(database)/documents/chats/$(roomId)).data;
      // Allow if chat is public (not personal) OR user is in the members list.
      return chat.isPersonal == false || request.auth.uid in chat.users;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Allow users to create their own profile, or update it.
      allow write: if isUser(userId);

      // Personal chat list subcollection
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }
    
    // Chat rooms and Messages
    match /chats/{roomId} {
      // Allow read/write access to the chat document (for metadata) if the user is a member.
      allow read, write: if isChatMember(roomId);

      match /messages/{messageId} {
        // Allow read/write to messages only if the user is a member of the chat.
        allow read, write: if isChatMember(roomId);
      }
    }

    // Community Requirements
    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if (isAuthenticated() && request.auth.uid == resource.data.user.id) || isAdmin();
    }

    // Offers & Coupons
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      // Only admins can create, update, or delete offers.
      allow write: if isAdmin();
    }
  }
}
