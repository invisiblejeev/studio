
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only manage their own profile.
    // Any authenticated user can read public profile info (needed for chat avatars/names).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }

    // Admins need list access for dashboards, new users need it for checking for unique usernames.
    match /users/{document=**} {
        allow list: if request.auth != null;
    }

    // Public and Private Chat Rooms
    match /chats/{roomId}/{document=**} {
      // For private chats (e.g., "uid1_uid2"), only participants can read/write.
      function isPrivateChatParticipant() {
        return request.auth.uid in roomId.split('_');
      }

      // For public state-based chats, any authenticated user can read/write.
      function isPublicChat() {
        return !(request.auth.uid in roomId.split('_'));
      }

      // Apply rules to messages subcollection
      match /messages/{messageId} {
         allow read: if (isPublicChat() && request.auth != null) || isPrivateChatParticipant();
         allow create: if (isPublicChat() && request.auth != null) || isPrivateChatParticipant();
         // Only admins should be able to update/delete messages directly
         allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
       
      // Allow participants to read/update the top-level chat document (for last message display)
      allow read, update: if (isPublicChat() && request.auth != null) || isPrivateChatParticipant();
      // Allow chat document to be created
      allow create: if request.auth != null;
    }
    
    // Admins need collection group access to query across all messages for spam moderation.
    match /{path=**}/messages/{messageId} {
       allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Any authenticated user can create a requirement (via the backend trigger).
    // Only admins can update or delete them.
    match /requirements/{reqId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Any authenticated user can read offers.
    // Only admins can create, update, or delete them.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Admins can manage flagged content.
    match /flagged_content/{contentId} {
       allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
