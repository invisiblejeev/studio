
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read their own profile, and other users can read public profiles
    match /users/{userId} {
      // Any authenticated user can read public profile data.
      allow read: if isAuthenticated();
      // Only the user themselves can create, update, or delete their profile.
      allow write: if isOwner(userId);

      // Rules for the personalChats subcollection
      match /personalChats/{otherUserId} {
        // A user can read and list their own personal chat references.
        allow read: if isOwner(userId);
        // A user can create a chat reference in their own list, and another user
        // can create one if they are part of the chat being referenced.
        allow write: if isOwner(userId) || (isAuthenticated() && request.auth.uid == otherUserId);
      }
    }
    
    // Offers are public to all authenticated users for reading.
    match /offers/{offerId} {
        allow read: if isAuthenticated();
        // Only admins can create, update, or delete offers.
        allow write: if isAuthenticated() && isAdmin();
    }
    
    // Flagged content can only be accessed by admins
    match /flagged_content/{contentId} {
        allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Inappropriate logs can only be written to, not read back by clients.
    match /inappropriate_logs/{logId} {
        allow read: if false; // No one can read these logs from the client
        allow write: if isAuthenticated(); // The server-side logic handles this
    }

    match /chats/{roomId} {
        // A chat room's metadata (like user list) can be read if the user is in the chat.
        allow get: if isAuthenticated() && request.auth.uid in resource.data.users;
        // Anyone can create a chat room (done via a server-side function), 
        // and users can update the last message timestamp.
        allow write: if isAuthenticated();

        // Rules for messages within any chat room (public or personal)
        match /messages/{messageId} {
            // Allow reading messages if it's a public state chat (not containing '_'),
            // or if it's a personal chat and the user is one of the two participants.
            allow read: if isAuthenticated() && (!roomId.matches('.*_.*') || request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);
            
            // Allow writing messages if it's a public state chat
            // or if it's a personal chat and the user is a participant.
            allow write: if isAuthenticated() && (!roomId.matches('.*_.*') || request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);
        }
    }
  }
}
