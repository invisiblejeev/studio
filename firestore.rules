rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if a user is a member of a specific chat
    function isChatMember(roomId) {
      let chat = get(/databases/$(database)/documents/chats/$(roomId)).data;
      // Allow if the chat is public (not personal) OR if the user is in the users array for a private chat.
      return chat.isPersonal == false || (isAuthenticated() && request.auth.uid in chat.users);
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // Users can only read/write to their own personalChats subcollection
      match /personalChats/{otherUserId} {
        allow read, write: if isUser(userId);
      }
    }

    // Rules for chat rooms and their messages
    match /chats/{roomId} {
      // Allow read/write on a chat document if the user is a member.
      allow read, write: if isChatMember(roomId);
      
      // Rules for messages within a chat room
      match /messages/{messageId} {
        // Allow reading messages if the user is a member of the chat.
        allow read: if isChatMember(roomId);
        // Allow creating messages if the user is a member of the chat and the author of the message.
        // Allow updating/deleting (soft delete) only if the user is the author of the message.
        allow create: if isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        allow update: if isChatMember(roomId) && resource.data.user.id == request.auth.uid;
      }
    }

    // Anyone authenticated can read requirements.
    // Users can create requirements.
    // Only the author or an admin can update/delete a requirement.
    match /requirements/{requirementId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if (isAuthenticated() && resource.data.user.id == request.auth.uid) || isAdmin();
    }
    
    // Anyone authenticated can read offers.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
