
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, but only write to their own.
    // Anyone can query the user list for signup checks.
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // Admins can read all flagged content.
    match /flagged_content/{docId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers are public to read, but only admins can modify them.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Requirements are public to read.
    // Only admins can update/delete, but the backend trigger (not a user) creates them.
    match /requirements/{reqId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null; // Allow backend function to create
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /chats/{roomId} {
      // Allow read on the chat document itself if it's a public chat,
      // or if the user is a participant in a private chat.
      allow read: if request.auth != null && (
        !roomId.matches('.*_.*') || request.auth.uid in roomId.split('_')
      );

      // Allow write to the chat document (for lastMessage updates) using the same logic.
      allow write: if request.auth != null && (
        !roomId.matches('.*_.*') || request.auth.uid in roomId.split('_')
      );

      // --- This is the critical fix ---
      // Explicitly define rules for the 'messages' subcollection.
      match /messages/{messageId} {
        // Allow read access under the same conditions as the parent chat room.
        allow read: if request.auth != null && (
          !roomId.matches('.*_.*') || request.auth.uid in roomId.split('_')
        );

        // Allow users to create messages in public chats,
        // or in private chats they are a part of.
        // This rule only checks the incoming data, not existing data.
        allow create: if request.auth.uid == request.resource.data.user.id && (
            !roomId.matches('.*_.*') || request.auth.uid in roomId.split('_')
        );

        // Generally, don't allow updates/deletes from the client.
        // These could be enabled for admins if needed.
        allow update, delete: if false;
      }
    }
    
    // Admin collectionGroup query for spam checking.
    // This allows an admin to query across all 'messages' subcollections.
    match /{path=**}/messages/{messageId} {
        allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
