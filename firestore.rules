rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // USERS
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
    }
    
    // CHATS
    match /chats/{roomId} {
      // A user can read a chat document if it's a public chat, or if they are a member of that private chat.
      allow read: if (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false) || 
                   (request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);
                   
      // Allow any authenticated user to create a chat room. The client logic handles adding the correct users.
      allow create: if isAuthenticated();

      // Allow a user to update the chat document (e.g., last message) only if they are a member.
      allow update: if request.auth.uid in resource.data.users;

      // MESSAGES subcollection
      match /messages/{messageId} {
        // A user can read messages if they can read the parent chat room document.
        allow read: if (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false) || 
                     (request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);

        // A user can create a message if they are the author and they are a member of the chat.
        allow create: if request.resource.data.user.id == request.auth.uid &&
                       ((get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false) ||
                        (request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users));

        // A user can update their own message (for editing/deleting).
        allow update: if request.resource.data.user.id == request.auth.uid;

        // No direct client deletes.
        allow delete: if false;
      }
    }

    // REQUIREMENTS
    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Allow update/delete if the user is the author or an admin.
      allow update, delete: if (request.auth.uid == resource.data.user.id || isAdmin());
    }

    // OFFERS
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      // Only admins can create, update, or delete offers.
      allow write: if isAdmin();
    }
  }
}
