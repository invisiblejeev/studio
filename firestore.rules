
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant(roomId) {
      // For private chats, roomID is 'uid1_uid2'. Check if user is one of them.
      return request.auth.uid in roomId.split('_');
    }

    // USERS
    // Anyone can read a user's profile (for chat avatars, names).
    // Only the owner can write to their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);

      // PERSONAL CHATS subcollection
      // Only the owner of the main user document can read/write their list of personal chats.
      match /personalChats/{otherUserId} {
        allow read, write: if isOwner(userId);
      }
    }

    // CHATS
    // This collection holds both public and private chat rooms.
    match /chats/{roomId} {
      // Allow anyone to read/write to the chat document itself if they are authenticated.
      // The real security is on the messages subcollection.
      allow read, write: if isAuthenticated();

      // MESSAGES subcollection
      match /messages/{messageId} {
        // For PUBLIC chats (e.g., 'california', no underscore), any authenticated user can read/write.
        // For PRIVATE chats (e.g., 'uid1_uid2'), only participants can read/write.
        allow read, write: if isAuthenticated() && (!roomId.matches('.*_.*') || isParticipant(roomId));
      }
    }

    // REQUIREMENTS
    // Any authenticated user can read or create requirements.
    // Only the author or an admin can update/delete. Admins are checked by existence in the /admins collection.
    match /requirements/{requirementId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.user.id || exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }

    // OFFERS
    // Any authenticated user can read offers.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // ADMINS
    // Only admins should be able to read this collection, but for simplicity in client-side checks,
    // we allow any authenticated user to read it. Writes should ONLY be done from the Firebase Console.
    match /admins/{userId} {
        allow read: if isAuthenticated();
        allow write: if false; // Lock down writes from client
    }
  }
}
