
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Function to check if a user is a member of a private chat.
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }
    
    // User profiles can be read by any authenticated user, but only written by the owner.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
    }
    
    // Rules for chat rooms and their messages.
    match /chats/{roomId} {
      // Allow read if the chat is public OR the user is a member of the private chat.
      allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);

      // Any authenticated user can create a chat room.
      allow create: if isAuthenticated();

      // Allow updates to last message details if the user is a member of the chat.
      allow update: if isChatMember(roomId);
      
      match /messages/{messageId} {
        // A user can read messages if they can read the parent chat room.
        allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);

        // A user can create a message if they are the author and a member of the chat.
        allow create: if request.resource.data.user.id == request.auth.uid && isChatMember(roomId);

        // A user can update their own message (for edits/soft deletes).
        allow update: if resource.data.user.id == request.auth.uid;
        
        // Deny all client deletes.
        allow delete: if false;
      }
    }

    // Requirements can be read by anyone authenticated. They can be created by any auth'd user.
    // They can only be updated/deleted by the author or an admin.
    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if (isAuthenticated() && resource.data.user.id == request.auth.uid) || isAdmin();
    }

    // Offers can be read by anyone authenticated, but only created, updated, or deleted by an admin.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
