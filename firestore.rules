
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/personalChats/$(roomId)).data.members;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId);

      // User's personal chat list metadata
      match /personalChats/{otherUserId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Public State-Based Chats
    match /chats/{stateId} {
      allow read, create: if isAuth();
      allow update, delete: if false; // Updates handled by subcollection

      match /messages/{messageId} {
        allow read, create: if isAuth();
        allow update, delete: if isAuth() && isOwner(resource.data.user.id);
      }
    }
    
    // Personal One-on-One Chats
    match /personalChats/{roomId} {
      allow get: if isAuth() && request.auth.uid in resource.data.members;
      // This rule is critical: it allows a user to query for all chats where they are a member.
      allow list: if isAuth() && request.query.where.array_contains == request.auth.uid;
      allow create: if isAuth() && request.auth.uid in request.resource.data.members;
      allow update: if isAuth() && isChatMember(roomId);
      
      match /messages/{messageId} {
         allow read, create: if isAuth() && isChatMember(roomId);
         allow update, delete: if isAuth() && isChatMember(roomId) && isOwner(resource.data.user.id);
      }
    }

    // Requirements
    match /requirements/{requirementId} {
      allow read, create: if isAuth();
      allow update, delete: if isAuth() && (isOwner(resource.data.user.id) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Offers
    match /offers/{offerId} {
      allow read: if isAuth();
      allow write: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
