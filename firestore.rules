
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /admins/{userId} {
      allow read, write: if false; // Can only be changed from the server/console
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      
      match /personalChats/{otherUserId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    match /chats/{roomId} {
      function isParticipant() {
        return request.auth.uid in resource.data.users;
      }

      function isPublic() {
        return resource.data.isPersonal == false;
      }

      // Any authenticated user can read public chats.
      // Participants can read their private chats.
      allow read: if request.auth != null && (isPublic() || isParticipant());
      
      // Any authenticated user can create a chat room.
      // Participants can update their private chats.
      // Any authenticated user can update a public chat.
      allow write: if request.auth != null;

      match /messages/{messageId} {
        // Read access follows the parent chat document's rules.
        allow read: if exists(/databases/$(database)/documents/chats/$(roomId)) && (
          get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false ||
          request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users
        );

        // Any authenticated user can create messages in any room they can read.
        allow create: if request.auth != null;

        // Only the message author or an admin can update/delete.
        allow update, delete: if request.auth.uid == resource.data.user.id || isAdmin();
      }
    }

    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.user.id || isAdmin();
    }

    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
  }
}
