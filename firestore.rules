
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Users can only read their own personal chat list.
       match /personalChats/{otherUserId} {
         allow read: if request.auth.uid == userId;
       }
    }

    // Rules for chat rooms and messages
    match /chats/{roomId} {
      // This rule is intentionally left open for reads to allow security rules on subcollections to work correctly.
      // Actual document data access is controlled by the rules on the 'messages' subcollection.
      allow read: if request.auth != null;

      match /messages/{messageId} {
        // A user can read a message if:
        // 1. It's a public chat (isPersonal is explicitly false).
        // OR
        // 2. They are a member of that specific private chat room.
        allow read: if request.auth != null && (
          get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false ||
          request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users
        );

        // An authenticated user can write a message to any chat they have access to.
        // The message's user.id should match the authenticated user's uid.
        allow write: if request.auth != null && request.resource.data.user.id == request.auth.uid;
      }
    }

    // Requirements are readable by any authenticated user.
    // Creation is handled by backend triggers, not clients.
    // Admins can update or delete.
    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create: if false; // Deny client-side creation
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers are readable by any authenticated user.
    // Only admins can create, update, or delete them.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
