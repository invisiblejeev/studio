
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write to their own profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // Public collections that anyone authenticated can read.
    match /requirements/{docId} {
      allow read: if request.auth.uid != null;
      // Only admins can write/delete requirements.
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /offers/{docId} {
      allow read: if request.auth.uid != null;
      // Only admins can write/delete offers.
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /chats/{roomId} {
      // For personal chats (roomId contains '_'), only participants can read/write.
      // For public state chats, any authenticated user can read/write.
      function isParticipant() {
        return request.auth.uid in resource.data.users;
      }

      function isPublicChat() {
        return !roomId.matches('.*_.*');
      }
      
      allow read, update: if (isPublicChat() && request.auth.uid != null) || (isParticipant());
      
      match /messages/{messageId} {
        allow read, create: if (isPublicChat() && request.auth.uid != null) || (isParticipant());
      }
    }
    
    // Admins can read flagged content.
    match /flagged_content/{docId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Personal chat list for each user
    match /users/{userId}/personalChats/{chatId} {
        allow read, list, create, update: if request.auth.uid == userId;
    }
  }
}
