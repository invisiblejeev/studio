
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own profile
      allow create: if request.auth != null;
      
      // A user can read their own profile
      // An admin can read any user's profile
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);

      // A user can update their own profile
      // An admin can update any user's profile
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      
      // A user can delete their own profile
      // An admin can delete any user's profile
      allow delete: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    // Rules for chat rooms (both public states and private user-to-user)
    match /chats/{roomId}/{documents=**} {
        // Any authenticated user can read and write messages in any chat room.
        // This is a permissive rule for a community app.
        allow read, write: if request.auth != null;
    }
    
    // Rules for offers, which are read-only for regular users but writeable by admins
    match /offers/{offerId} {
        // Any authenticated user can view offers
        allow read: if request.auth != null;
        // Only admins can create, update, or delete offers
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for flagged content, only admins can read or write
    match /flagged_content/{contentId} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for inappropriate message logs, only admins can read or write
    match /inappropriate_logs/{logId} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
