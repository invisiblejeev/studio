rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Users can read/write their own profile
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
    }
    
    // Rules for the subcollection of personal chats
    match /users/{userId}/personalChats/{chatId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Admins collection is read-only for clients
    match /admins/{userId} {
      allow read: if isAdmin();
      allow write: if false; // No client-side writes
    }

    // Chat documents can be read by participants, and updated by anyone authenticated
    // to allow for lastMessage updates from triggers or client.
    match /chats/{roomId} {
        allow read: if request.auth.uid in resource.data.users || resource.data.isPersonal == false;
        // Allow writes (for creating the room or updating last message) if the user is authenticated.
        // More specific rules are on the messages subcollection.
        allow write: if request.auth.uid != null;
    }

    // Chat messages
    match /chats/{roomId}/messages/{messageId} {
      // Public chats are readable by anyone authenticated
      // Private chats are only readable by participants
      allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
      
      // Users can only create messages for themselves.
      allow create: if request.auth.uid == request.resource.data.user.id;
                       
      // Users can only update their own messages (for soft delete) within 24 hours
      allow update: if request.auth.uid == resource.data.user.id &&
                       request.time < resource.data.timestamp + duration.value(24, 'h');

      // No direct deletes
      allow delete: if false;
    }

    // Requirements
    match /requirements/{reqId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid != null;
      allow update, delete: if isAdmin() || request.auth.uid == resource.data.user.id;
    }
    
    // Offers
    match /offers/{offerId} {
      allow read: if request.auth.uid != null;
      // Only admins can create, update, or delete offers
      allow write: if isAdmin();
    }
  }
}
