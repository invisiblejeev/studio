
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // USERS
    // Users can read any user's profile (for profile viewing).
    // Users can only create and update their OWN profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
      
      // Users can only read their OWN list of personal chats.
      match /personalChats/{otherUserId} {
        allow read: if request.auth.uid == userId;
      }
    }
    
    // CHATS
    match /chats/{roomId} {
      // Allow read/write access to the chat document itself (for lastMessage updates)
      // if the user is part of the chat (for private chats) or if it's a public chat.
      allow read, write: if request.auth != null && (
                         (resource == null || request.auth.uid in resource.data.users) ||
                         (existsAfter(path) && request.auth.uid in request.resource.data.users) ||
                         !('users' in resource.data) // Public chat
                       );

      // MESSAGES
      // Allow users to read messages in public chats or private chats they are a member of.
      // Allow users to write messages only to chats they are a member of (for private chats)
      // or to any public chat.
      match /messages/{messageId} {
        allow read: if request.auth != null && (
                      get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || 
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users
                    );
        allow create: if request.auth != null && (
                        // For public chats, anyone can write.
                        get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false ||
                        // For private chats, only members can write.
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users
                      );
        allow update, delete: if request.auth.uid == resource.data.user.id; // Allow users to update/delete their own messages
      }
    }

    // REQUIREMENTS
    // Any authenticated user can read the requirements list.
    // Writes are handled by the backend trigger, so client-side writes are disallowed.
    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if false; // Only backend can modify
    }
    
    // OFFERS
    // Any authenticated user can read offers.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
       allow read: if request.auth != null;
       allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // FLAGGED CONTENT (Admin only)
    match /flagged_content/{contentId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
