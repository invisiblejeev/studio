
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Allow reading any user's profile, but only allow a user to create, update, or delete their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Chats: Handles both public state chats and private user-to-user chats.
    match /chats/{chatId} {
      // Allow any authenticated user to create a chat document or update its timestamp.
      // This is needed to start new chats and to update the "last message" time for sorting.
      allow write: if request.auth != null;
      
      // Allow a user to read a chat document if they are a member of that chat.
      // For public state chats, this is always true. For private chats, it checks the 'users' array.
      allow read: if request.auth != null && (get(/databases/$(database)/documents/chats/$(chatId)).data.users == null || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);

      // Messages Subcollection
      match /messages/{messageId} {
        // Allow anyone in a chat to read all messages within it.
        allow read: if request.auth != null && (get(/databases/$(database)/documents/chats/$(chatId)).data.users == null || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users);
        
        // Allow a user to create a message if they are authenticated.
        // For public chats, anyone can write. For private, this is implicitly handled by the parent read/write rules.
        allow create: if request.auth != null;

        // Allow a user to update or delete a message only if they are the author of that message or an admin.
        allow update, delete: if request.auth != null && (request.auth.uid == resource.data.user.id || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      }
    }

    // Personal Chats Subcollection (inside users)
    match /users/{userId}/personalChats/{otherUserId} {
        // A user can only see and manage their own list of personal chats.
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Offers: Allow any authenticated user to read offers, but only admins can write/delete.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Flagged Content: Only admins can read or write flagged content.
    match /flagged_content/{docId} {
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Inappropriate Logs: Allow authenticated users to create logs (from the moderation flow). Admins can read them.
    match /inappropriate_logs/{logId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
