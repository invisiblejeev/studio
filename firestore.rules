rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can only read/write their own profile, but can read anyone's public data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Any authenticated user can read public state chats
    match /chats/{stateId} {
        allow read: if isAuthenticated();
        // Allow updating the last message timestamp for public chats
        allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessageTimestamp']);
    }

    // Messages in public state chats
    match /chats/{stateId}/messages/{messageId} {
      allow read: if isAuthenticated();
      // Allow any authenticated user to create messages in public chats
      allow create: if isAuthenticated();
      // Only admins can update/delete messages in public chats
      allow update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Personal chats
    match /chats/{roomId} {
        // A user can only interact with a personal chat room if they are part of it.
        allow read, update: if isAuthenticated() && request.auth.uid in resource.data.users;
    }

    // Messages in personal chats
    match /chats/{roomId}/messages/{messageId} {
        // A user can read/write messages in a personal chat only if they are a member of that chat.
        allow read, create: if get(/databases/$(database)/documents/chats/$(roomId)).data.users.hasAny([request.auth.uid]);
        allow update, delete: if get(/databases/$(database)/documents/chats/$(roomId)).data.users.hasAny([request.auth.uid]);
    }
    
    // Users can manage their own personalChats subcollection
    match /users/{userId}/personalChats/{otherUserId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
        // Allow another user to create a chat reference if they are initiating the chat
        allow create: if isAuthenticated() && request.auth.uid != userId;
    }

    // Offers can be read by anyone, but only created/edited/deleted by admins
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }

    // Flagged content collection for admin review
    match /flagged_content/{contentId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Inappropriate logs can be created by any authenticated user (via server-side flow)
    match /inappropriate_logs/{logId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && isAdmin();
    }
  }
}
