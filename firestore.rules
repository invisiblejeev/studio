
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read other user profiles, but can only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Users can only read their own personal chat metadata.
      // Writes are handled by backend triggers for security.
      match /personalChats/{otherUserId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId; // Allow user to reset their own unread count
      }
    }

    // Public chats are readable by anyone authenticated.
    // Private chats are readable only by members of the chat.
    match /chats/{roomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Writes are for last message updates, etc.
    }
    
    // Rules for messages within a chat
    match /chats/{roomId}/messages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == request.resource.data.user.id;
    }
    
    // Requirements can be read by anyone, but only created by backend functions.
    // Admins can update or delete them.
    match /requirements/{requirementId} {
        allow read: if request.auth != null;
        allow create: if false; // Should only be created by backend
        allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers can be read by anyone, but only written by admins.
    match /offers/{offerId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // This rule is for the Admin dashboard's collectionGroup query to find spam.
    // It allows an admin to read from the 'messages' collection group.
    match /{path=**}/messages/{messageId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
