
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users can only read/write their own profile
    // Admins can read any profile
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Personal chat list is a subcollection of user
      match /personalChats/{otherUserId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Rules for public state-based chat rooms
    match /chats/{state} {
       allow read, update: if isAuthenticated(); // Allow reading chat doc and updating timestamp
       
       match /messages/{messageId} {
         // Any authenticated user can read/write to public state chats
         allow read, write: if isAuthenticated();
         // Admins can delete messages
         allow delete: if isAdmin();
       }
    }
    
    // Rules for private 1-on-1 chat rooms
    match /chats/{roomId} {
    	// RoomId for personal chats is formatted as "uid1_uid2"
      // Only members of the chat can read/update the chat document
      allow read, update: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
      
      match /messages/{messageId} {
      	// Only members of the chat can read/write messages
      	allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
      }
    }
    
    // Rules for offers
    match /offers/{offerId} {
    	// Any authenticated user can read offers
      allow read: if isAuthenticated();
      // Only admins can create, update, or delete offers
      allow write: if isAdmin();
    }
    
    // Rules for requirements
    match /requirements/{reqId} {
    	// Any authenticated user can read requirements
      allow read: if isAuthenticated();
      // Any authenticated user can create a requirement (via sending a message)
      allow create: if isAuthenticated();
      // Admins can update or delete requirements
      allow update, delete: if isAdmin();
    }
    
    // Admins can read flagged content for moderation purposes
    match /flagged_content/{contentId} {
    	allow read, write: if isAdmin();
    }
  }
}
