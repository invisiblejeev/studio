rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a private chat
    // by checking if their UID is in the chat room's ID (e.g., "uid1_uid2").
    function isChatMember(roomId) {
      return request.auth.uid in roomId.split('_');
    }

    // Users can only read their own profile, but can write to other user's
    // personalChats subcollection when creating a new chat.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Allow creation of a personal chat entry when initiating a conversation.
      // The `roomId` in the request data ensures it's for a chat they are part of.
      match /personalChats/{otherUserId} {
        allow write: if request.auth != null && isChatMember(request.resource.data.roomId);
      }
    }

    // Public state-based chats are readable and writable by any authenticated user.
    match /chats/{stateId}/{document=**} {
      allow read, write: if request.auth != null;
    }

    // Personal one-on-one chats
    match /personalChats/{roomId} {
      // Allow a user to read/write the chat document itself if they are a member.
      // This is for creating the room and updating lastMessage timestamps.
      allow read, write: if isChatMember(roomId);

      // Rules for the messages subcollection within a personal chat.
      match /messages/{messageId} {
        // Allow read/create on messages only if the user is a member of the chat.
        allow read, create: if isChatMember(roomId);

        // Allow update/delete only if the user is the original author of the message.
        allow update, delete: if isChatMember(roomId) && request.auth.uid == resource.data.user.id;
      }
    }
    
    // Requirements can be read by anyone, but only created by authenticated users.
    // They can only be updated/deleted by their author or an admin.
    match /requirements/{requirementId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.user.id || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Offers can be read by anyone, but only written (created, updated, deleted) by admins.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
