
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read/update their own profile. Admins can write to any profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Allow a user to read their own list of personal chats.
      match /personalChats/{otherUserId} {
        allow read: if request.auth.uid == userId;
      }
    }
    
    // Rules for the 'chats' collection
    match /chats/{roomId} {
      
      // Allow read/write if the user is part of the chat (for private chats) or if it's a public chat.
      allow read: if request.auth != null && (
                    (resource.data.isPersonal == true && request.auth.uid in resource.data.users) ||
                    (resource.data.isPersonal == false) ||
                    // This case is for the initial creation of a private chat
                    (!exists(/databases/$(database)/documents/chats/$(roomId)) && request.auth.uid in roomId.split('_'))
                  );

      allow write: if request.auth != null; // Simplified for now, can be tightened later if needed.
      
      // Messages can be created by any authenticated user in a public chat,
      // or by one of the two members of a private chat.
      match /messages/{messageId} {
        allow create: if request.auth != null && (
                      (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false) ||
                      (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == true && request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users)
                    );
        allow read: if request.auth != null; // Simplification for now
        allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
    }
    
    // Requirements can be read by any authenticated user.
    // They can only be written/deleted by admins (via cloud functions/backend).
    match /requirements/{reqId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Offers can be read by any authenticated user.
    // They can only be written/deleted by admins.
    match /offers/{offerId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Admins can read flagged content for improving the AI model.
    match /flagged_content/{contentId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Collection group query for spam detection by admins.
    match /{path=**}/messages/{messageId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
