rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Checks if the requesting user is a member of the given chat room.
    // This is the key function to correctly secure private chats.
    function isChatMember(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users;
    }
    
    // --- Collections ---

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);

      // A user can read their own list of personal chats.
      // A user can also write to this list to update unread counts or when a new chat is created.
      match /personalChats/{chatId} {
        allow read, write: if isUser(userId);
      }
    }
    
    // Chat rooms and their messages
    match /chats/{roomId} {
      // Allow create for any authenticated user to start a new public or private chat.
      allow create: if isAuthenticated();
      
      // Allow read if it's a public chat OR if the user is a member of the private chat.
      allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);
      
      // Allow update for last message tracking if the user is a member of the chat.
      allow update: if isChatMember(roomId);

      // Message subcollection rules
      match /messages/{messageId} {
        // A user can read messages if they have access to the parent chat room.
        allow read: if get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || isChatMember(roomId);
        
        // A user can create a message if they are a member of the chat and the author of the message.
        allow create: if isChatMember(roomId) && request.resource.data.user.id == request.auth.uid;
        
        // Allow updates (for edits/deletes) only if the user is the original author.
        allow update: if resource.data.user.id == request.auth.uid;
        
        // Disallow client-side deletes completely.
        allow delete: if false;
      }
    }

    // Requirements can be read by anyone, created by anyone, but only updated/deleted by the author or an admin.
    match /requirements/{reqId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if (resource.data.user.id == request.auth.uid || isAdmin());
    }

    // Offers can be read by anyone, but only written by an admin.
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
