rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Helper function to check if a user is the author of a resource
    function isAuthor(resource) {
      return request.auth.uid == resource.data.user.id;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Admins collection is read-only for admins, no client writes.
    match /admins/{userId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // Chat rooms and messages
    match /chats/{roomId}/{documents=**} {
        // Public rooms (like states) don't have '_' in their ID.
        // Private rooms are composite IDs like 'uid1_uid2'.
        function isPublic() {
            return !roomId.matches('.*_.*');
        }
        
        function isMember() {
            return request.auth.uid in roomId.split('_');
        }

        allow read, write: if request.auth != null && (isPublic() || isMember());
    }

    // Override for specific message actions
    match /chats/{roomId}/messages/{messageId} {
        allow read: if true; // Inherits from parent, but let's be explicit
        allow create: if request.auth != null;
      
        // Users can only edit/delete their own messages within 24 hours.
        allow update: if request.auth.uid == resource.data.user.id && request.time - resource.data.timestamp < duration.value(24, 'h');
      
        // No hard deletes on messages.
        allow delete: if false;
    }

    // Requirements can be read by anyone, created by any user.
    // Update/delete is restricted to the author or an admin.
    match /requirements/{reqId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isAuthor(resource) || isAdmin();
    }
    
    // Offers can be read by anyone, but only written by admins.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
