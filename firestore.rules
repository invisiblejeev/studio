
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Users: Can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isUser(userId);
    }
    
    // Admins: Read-only for clients.
    match /admins/{userId} {
        allow read: if isAuth();
        allow write: if false; // Only allow server-side writes
    }

    // Chats & Messages
    match /chats/{roomId} {
      // Public chats (no underscore) are readable by any authenticated user.
      // Private chats (with underscore) are readable only by participants.
      allow read: if isAuth() && (
                    !roomId.matches('.*_.*') || 
                    (roomId.matches('.*_.*') && request.auth.uid in roomId.split("_"))
                  );

      // Any authenticated user can create a chat room or update its metadata (last message).
      allow create, update: if isAuth();

      // Messages
      match /messages/{messageId} {
        // Read access follows the same logic as the parent chat room.
        allow read: if isAuth() && (
                      !roomId.matches('.*_.*') || 
                      (roomId.matches('.*_.*') && request.auth.uid in roomId.split("_"))
                    );
        
        // Users can only create messages as themselves.
        allow create: if isAuth() && request.resource.data.user.id == request.auth.uid;
        
        // Users can only "delete" (soft delete) their own messages.
        allow update: if isAuth() && resource.data.user.id == request.auth.uid;
      }
    }

    // Requirements: Any auth'd user can read/create. Only author or admin can update/delete.
    match /requirements/{requirementId} {
      allow read, create: if isAuth();
      allow update, delete: if isAuth() && (resource.data.user.id == request.auth.uid || isAdmin());
    }

    // Offers: Any auth'd user can read. Only admins can write.
    match /offers/{offerId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
  }
}

    