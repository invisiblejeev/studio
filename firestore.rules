
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthed() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthed() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check for auth first to prevent errors on unauthed requests.
      return isAuthed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users Collection
    // - Anyone authenticated can read user profiles (for displaying names, avatars, etc.).
    // - Only the user themselves can edit their own profile.
    match /users/{userId} {
      allow read: if isAuthed();
      allow write: if isOwner(userId);
    }

    // Chats & Messages Collections
    // The client is responsible for querying the correct chats.
    // These rules simply allow authenticated users to access the data they query.
    // This model is simpler and avoids complex/racy `get()` calls in rules.
    match /chats/{roomId}/{documents=**} {
      allow read, write: if isAuthed();
    }
    
    // Requirements Collection
    // - Anyone can read the requirements list.
    // - No one can create requirements from the client-side (only the backend AI trigger can).
    // - Only admins can update or delete requirements.
    match /requirements/{requirementId} {
      allow read: if isAuthed();
      allow create: if false; 
      allow update, delete: if isAdmin();
    }

    // Offers Collection
    // - Anyone can read offers.
    // - Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if isAuthed();
      allow write: if isAdmin();
    }

  }
}
