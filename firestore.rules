
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow any authenticated user to read any user's profile.
      // This is necessary for displaying user info (like avatars, usernames) throughout the app
      // and for features like counting members in a state.
      allow read: if request.auth != null;

      // Only the user themselves can update their own profile.
      allow write: if request.auth.uid == userId;
    }
    
    // Rules for the 'chats' collection and 'messages' subcollection
    match /chats/{roomId}/messages/{messageId} {
        // Any authenticated user can read messages.
        // The client application logic is responsible for showing the user only the chats they should see.
        // This simplifies the rules to prevent race conditions and permission errors.
        allow read: if request.auth != null;
        
        // An authenticated user can write a message.
        // Further validation (e.g., ensuring message.user.id matches request.auth.uid) can be added here
        // for enhanced security, but is handled client-side for now.
        allow write: if request.auth != null;
    }
    
    // Rules for the 'requirements' collection
    match /requirements/{requirementId} {
      // Any authenticated user can read requirements.
      allow read: if request.auth != null;
      
      // Only admins can update or delete requirements. Client-side creation is denied.
      allow create: if false;
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
       // Any authenticated user can read offers.
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete offers.
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // This rule is specifically for collectionGroup queries on 'messages' (e.g., for the admin spam log)
    match /{path=**}/messages/{messageId} {
      // Only an admin can read from the 'messages' collection group.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
