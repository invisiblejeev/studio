rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow authenticated users to read any user profile.
      allow read: if request.auth != null;
      // A user can only write to their own profile.
      allow write: if request.auth.uid == userId;
    }

    // Rules for the 'chats' collection and its 'messages' subcollection
    match /chats/{roomId} {
      // Allow read on the chat document if it's a public chat OR the user is a member.
      allow read: if request.auth != null && (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false || request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);
      // Allow any authenticated user to create a chat document (for proactive creation).
      allow create: if request.auth != null;
      // Allow any authenticated user to update chat metadata (like lastMessage).
      allow update: if request.auth != null;

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // A user can read a message if it's a public chat OR they are a member of the private chat.
        // This uses a get() call to check the parent chat document.
        allow read: if request.auth != null &&
          (get(/databases/$(database)/documents/chats/$(roomId)).data.isPersonal == false ||
           request.auth.uid in get(/databases/$(database)/documents/chats/$(roomId)).data.users);

        // Any authenticated user can write a message. The client logic ensures they only write to appropriate rooms.
        allow write: if request.auth != null;
      }
    }

    // This rule allows an admin to perform a collectionGroup query on all 'messages' collections.
    match /{path=**}/messages/{messageId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'requirements' collection
    match /requirements/{requirementId} {
      // Any authenticated user can read requirements.
      allow read: if request.auth != null;
      // Only admins can update or delete requirements.
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Clients cannot create requirements directly; this must be done by the backend (AI trigger).
      allow create: if false;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Any authenticated user can read offers.
      allow read: if request.auth != null;
      // Only admins can create, update, or delete offers.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
