
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read their own profile, but anyone can see a limited public profile.
    // Any authenticated user can create a user profile.
    match /users/{userId} {
      allow read; // Allow any authenticated user to read user profiles for display.
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == userId;
      
      // Personal chat metadata
      match /personalChats/{otherUserId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // State-based public chat rooms
    match /chats/{stateId} {
      // Allow authenticated users to read and write messages.
      // Allow any authenticated user to update the last message timestamp for sorting.
      allow read, update: if request.auth != null;

      match /messages/{messageId} {
        allow read, create: if request.auth != null;
        // Only an admin can update/delete messages in public channels.
        allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
    }

    // Personal (one-to-one) chat rooms
    match /chats/{roomId} {
      // Allow read/write access only if the user is part of the room.
      // roomID is formatted as "uid1_uid2"
      allow read, update: if request.auth != null && (request.auth.uid in roomId.split('_'));

      match /messages/{messageId} {
        allow read, create: if request.auth != null && (request.auth.uid in roomId.split('_'));
      }
    }
    
    // Offers are public to read for any authenticated user.
    // Only admins can create, update, or delete offers.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Admins can add flagged content for moderation training.
    match /flagged_content/{contentId} {
        allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Logs for inappropriate messages. Only admins can write to this.
    match /inappropriate_logs/{logId} {
        allow create: if request.auth != null;
    }
  }
}
